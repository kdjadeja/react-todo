{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","items","listItems","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","duration","easing","App","state","currentItem","scrollToTop","bind","animateScroll","containerId","this","setState","Date","now","preventDefault","newItem","itemData","unshift","filteredItems","filter","onSubmit","addItem","placeholder","handleInput","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAKe,SAASA,EAAUC,GAC9B,IAAMC,EAAQD,EAAMC,MACdC,EAAYD,EAAQA,EAAME,KAAI,SAAAC,GAChC,OACI,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC5B,2BACI,2BAAOC,KAAK,OACRC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SACI,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAIjD,uBAAGD,UAAU,mBAAmBU,QAAS,kBAAMf,EAAMgB,WAAWZ,EAAKE,aAKjF,KACJ,OACI,6BACI,kBAAC,IAAD,CAAUW,SAAU,IAAKC,OAAO,QAC3BhB,I,YC2DFiB,E,YAhFb,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KACDoB,MAAQ,CACXhB,KAAM,GACNiB,YAAa,CACXX,KAAM,KACNJ,IAAK,OAGT,EAAKgB,YAAc,EAAKA,YAAYC,KAAjB,gBATF,E,2EAYjBC,gBAAcF,YAAY,CACxBG,YAAa,gB,kCAGLb,GACVc,KAAKC,SAAS,CACZN,YAAa,CACXX,KAAME,EAAEE,OAAOL,MACfH,IAAKsB,KAAKC,W,8BAIRjB,GACNA,EAAEkB,iBACF,IAAMC,EAAUL,KAAKN,MAAMC,YAC3B,GAAqB,KAAjBU,EAAQrB,KAAa,CACvB,IAAMsB,EAAWN,KAAKN,MAAMnB,MAAQyB,KAAKN,MAAMnB,MAAQ,GAEvD+B,EAASC,QAAQF,GACjBL,KAAKC,SAAS,CACZ1B,MAAO+B,EACPX,YAAa,CACXX,KAAM,GACNJ,IAAK,KAGPoB,KAAKJ,gB,iCAIAhB,GACT,IAAM4B,EAAgBR,KAAKN,MAAMnB,MAAMkC,QAAO,SAAA/B,GAAI,OAChDA,EAAKE,MAAQA,KACfoB,KAAKC,SAAS,CACZ1B,MAAOiC,M,gCAGDxB,EAAMJ,GACd,IAAML,EAAQyB,KAAKN,MAAMnB,MACzBA,EAAME,KAAI,SAAAC,GACJA,EAAKE,MAAQA,IACfF,EAAKM,KAAOA,MAGhBgB,KAAKC,SAAS,CACZ1B,MAAOA,M,+BAIT,OACE,yBAAKI,UAAU,OACb,0BAAMG,GAAG,aAAa4B,SAAUV,KAAKW,QAAQd,KAAKG,OAChD,wBAAIrB,UAAU,WAAd,QACA,2BAAOE,KAAK,OAAO+B,YAAY,aAAa7B,MAAOiB,KAAKN,MAAMC,YAAYX,KAAMC,SAAUe,KAAKa,YAAYhB,KAAKG,QAChH,4BAAQnB,KAAK,UAAb,QAEF,yBAAKC,GAAG,YAAYH,UAAU,aAC5B,kBAAC,EAAD,CAAWJ,MAAOyB,KAAKN,MAAMnB,MAC3Be,WAAYU,KAAKV,WAAWO,KAAKG,MACjCb,UAAWa,KAAKb,UAAUU,KAAKG,c,GAxEzBc,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b86ae4d5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nexport default function ListItems(props) {\r\n    const items = props.items;\r\n    const listItems = items ? items.map(item => {\r\n        return (\r\n            <div className=\"list\" key={item.key}>\r\n                <p>\r\n                    <input type=\"text\"\r\n                        id={item.key}\r\n                        value={item.text}\r\n                        onChange={\r\n                            (e) => {\r\n                                props.setUpdate(e.target.value, item.key)\r\n                            }\r\n                        }\r\n                    />\r\n                    <i className=\"fa fa-trash icon\" onClick={() => props.deleteItem(item.key)} />\r\n                </p>\r\n            </div>\r\n        )\r\n    }) :\r\n        null;\r\n    return (\r\n        <div>\r\n            <FlipMove duration={500} easing=\"ease\">\r\n                {listItems}\r\n            </FlipMove>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems';\nimport { animateScroll } from \"react-scroll\";\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      item: [],\n      currentItem: {\n        text: null,\n        key: null\n      }\n    }\n    this.scrollToTop = this.scrollToTop.bind(this);\n  }\n  scrollToTop() {\n    animateScroll.scrollToTop({\n      containerId: \"todo_list\"\n    });\n  }\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  addItem(e) {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if (newItem.text !== \"\") {\n      const itemData = this.state.items ? this.state.items : []\n      // const data = [...itemData, newItem];\n      itemData.unshift(newItem);\n      this.setState({\n        items: itemData,\n        currentItem: {\n          text: '',\n          key: ''\n        }\n      },\n        this.scrollToTop\n      )\n    }\n  }\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter(item =>\n      item.key !== key);\n    this.setState({\n      items: filteredItems\n    })\n  }\n  setUpdate(text, key) {\n    const items = this.state.items;\n    items.map(item => {\n      if (item.key === key) {\n        item.text = text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <form id=\"to-do-form\" onSubmit={this.addItem.bind(this)}>\n          <h1 className=\"heading\">ToDo</h1>\n          <input type=\"text\" placeholder=\"Enter Text\" value={this.state.currentItem.text} onChange={this.handleInput.bind(this)} />\n          <button type=\"submit\">Add</button>\n        </form>\n        <div id=\"todo_list\" className=\"scrollbar\">\n          <ListItems items={this.state.items}\n            deleteItem={this.deleteItem.bind(this)}\n            setUpdate={this.setUpdate.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}